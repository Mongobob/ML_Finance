import pandas
import datetime

def get_data(paths):
    '''
    This function opens the 3 relevant paths with the csvs and returns their content as pandas-Dataframes.
    Input:[keyfigures, ratings, SP500 Companylist]
    :param paths: array with ordered 3 relative paths of data
    :return: 3 Pandas-Dataframes with data
    '''
    assert isinstance(paths, list)
    assert len(paths)>0
    names=['P500_LongTermCreditRating_Ratios_combined','Ratings','SP500_CompanyList']
    print(names)
    k=0
    for el in paths:
        assert isinstance(el, str)
        name=names[k]
        arr = pandas.read_csv(el)
        if k==0:
            arr1=arr
        elif k==1:
            arr2=arr
        else:
            arr3=arr
        k+=1
    return arr1, arr2, arr3


def combine_keyfigures_and_Companies(arr1,arr3):
    '''
    This Dataframe joines keyfigures and companylist using Permno as key
    :param arr1: Pandas-Dataframe of keyfigures
    :param arr3: Pandas-Dataframe of S&PCompanylist
    :return: joint Dataframe on Permno
    '''
    assert type(arr1)== pandas.DataFrame
    assert type(arr3) == pandas.DataFrame
    arr1=pandas.DataFrame(arr1)
    arr3 = pandas.DataFrame(arr3)
    arr3=arr3.rename(columns={'PERMNO':'permno'})
    output=pandas.merge_asof(arr1,arr3,'permno')
    return output

def combine_Ratings_and_Rest(rest,arr2):
    '''
    This function combines the already combined Dataframes with the Ratings using date and ticker
    :param rest: Pandas-Dataframe of keyfigures and S&PCompanylist
    :param arr2: Pandas-Dataframe of Ratings
    :return: joint Dataframe of all. Uncleaned
    '''
    assert type(rest)== pandas.DataFrame
    assert type(arr2) == pandas.DataFrame
    rest=pandas.DataFrame(rest)
    arr2 = pandas.DataFrame(arr2)
    arr2 = arr2.rename(columns={'tic': 'TICKER'})
    arr2['public_date']=arr2['datadate']
    rest['public_date']=rest['public_date']

    arr2['public_date'] = arr2['public_date'].apply(lambda x: pandas.to_datetime(str(x), format='%Y%m%d'))
    rest['public_date']=rest['public_date']=pandas.to_datetime(rest.public_date)

    arr2=add_key(arr2)
    rest=add_key(rest)

    arr2.to_csv(r'C:\Users\Sandro\OneDrive\Dokumente\Universit채t Z체rich\Aufbaustufe\2020 FS\Introduction to Machine Learning\Group Project\Data\b.csv')
    rest.to_csv(r'C:\Users\Sandro\OneDrive\Dokumente\Universit채t Z체rich\Aufbaustufe\2020 FS\Introduction to Machine Learning\Group Project\Data\c.csv')
    output = rest.merge(arr2, how='left', on=['key'])
    return output

def add_key(arr):
    '''
    This function adds a key to a dataframe
    :param arr: pandas dataframe
    :return: df + col key out of public-date and TICKER
    '''
    assert type(arr)==pandas.DataFrame
    arr=pandas.DataFrame(arr)
    arr['key'] = arr.public_date.astype(str) + arr.TICKER.astype(str)
    arr['key']=arr['key'].astype(str)
    return arr


def delete_no_rating(arr):
    '''
    Deletes rows where no rating can be found
    :param arr: Pandas-Dataframe
    :return: cleaned Pandas-Dataframe
    '''
    pass

def backfill_keyfigures(arr):
    '''
    If a key-figure for a date is missing, the one from the last existing date gets inserted
    :param arr: Pandas-Dataframe
    :return: Pandas-Dataframe with refilled data
    '''


